#!/usr/bin/env python

import sys
import math
import json

import rospy
import tf2_ros 
from tf.transformations import quaternion_from_euler
from geometry_msgs.msg import TransformStamped, Vector3,PoseStamped
from crazyflie_driver.msg import Position

def pos_callback(data):
    #rospy.loginfo(goal)
    tol = 0.2
    repeat = 10
    position = data.pose.position

    x = goal.pose.position.x
    y = goal.pose.position.y
    z = goal.pose.position.z

    err = [x-position.x,y-position.y,z-position.z]
    err = [i**2 for i in err]
    err_norm = math.sqrt(sum(err))
    while err > tol:
        rospy.loginfo('error:'+str(err_norm))
        rospy.loginfo('error:'+str(goal))
        pub.publish(goal)
    for i in range(repeat):
        hover(goal)


def create_goal(coordinate):
    goal = PoseStamped()
    goal.header.stamp = rospy.Time(0)
    goal.pose.position.x = coordinate[0]
    goal.pose.position.y = coordinate[1]
    goal.pose.position.z = coordinate[2]

    goal.pose.orientation.x, 
    goal.pose.orientation.y, 
    goal.pose.orientation.z, 
    goal.pose.orientation.w = quaternion_from_euler(0,0,coordinate[3])

    return goal

def hover(goal):
    pub.publish(goal)

coordinates = [(0,-1,0.4,0),(1,-1,0.4,0),(1.8,-1,0.4,0),(1.8,-1,0.4,90),(1.8,-1,0.4,90)]
goal = create_goal(coordinates[0])

pub = rospy.Publisher('/cf1/cmd_position',Position,queue_size=10)
pos = rospy.Subscriber('/cf1/pose', PoseStamped, pos_callback)


def main():
    global goal
    goal = PoseStamped()

    rospy.init_node('fly_around')
    rospy.sleep(10)

    coordinates = [(0,-1,0.4,0),(1,-1,0.4,0),(1.8,-1,0.4,0),(1.8,-1,0.4,90),(1.8,-1,0.4,90)]
    goal = create_goal(coordinates[0])
    #pub.publish(cmd_pos(coordinates[0]))
    #for i in range(len(coordinates)):
        #goal = create_goal(coordinates[i])

    rospy.spin()

if __name__ == "__main__":
    main()
